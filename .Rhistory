f4<-lm(mpg~am+wt+am:wt,data=d)
anova(f1,f2,f3,f4)
?mtcars
f4<-lm(mpg~am+wt+am:wt+cyl,data=d)
anova(f1,f2,f3,f4)
summary(f4)
f5<-lm(mpg~am+wt+am:wt+hp,data=d)
anova(f1,f2,f3,f4,f5)
summary(f5)
f5<-lm(mpg~am+wt+am:wt+cyl+hp,data=d)
anova(f1,f2,f3,f4,f5)
summary(f5)
summary(f3)
summary(f4)
summary(f5)
plot(f3)
mtcars
with(mtcars,plot(mpg,wt))
points(mtcars["Toyota Corolla",])
points(mtcars["Toyota Corolla",wt],mtcars["Toyota Corolla",mpg],col="red")
points(mtcars["Toyota Corolla",5],mtcars["Toyota Corolla",1],col="red")
points(mtcars["Toyota Corolla",5],mtcars["Toyota Corolla",1],col="red",pch=3)
points(mtcars["Toyota Corolla",5],mtcars["Toyota Corolla",1],col="red",pch=3,cex=5)
with(d,plot(mpg,wt,col=am))
with(d,plot(mpg,ht,col=am))
with(d,plot(mpg,hp,col=am))
with(d,plot(mpg,cyl,col=am))
library(devtoolds)
library(devtools)
install_github("rmarkdown")
library(rmarkdown)
library("rmarkdown", lib.loc="C:/Program Files/R/R-3.0.2/library")
library(swirl)
swirl()
data(mtcars)
d<-mtcars
d$am<-as.factor(d$am)
with(d,boxplot(mpg~am))
d$am1<-d$am
levels(d$am1)<-c("A","M")
with(d,boxplot(mpg~am1, main="Milles per Galon (MPG) vs. Transmission type"))
pairs(d,panel=panel.smooth,col=d$am)
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
}
}
m.cor
heatmap(m.cor)
?heatmap
heatmap(m.cor,Rowv=NA)
heatmap(m.cor,Rowv=NA,Colv=NA)
heatmap(m.cor,Rowv=NA,Colv=NA)
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]==1){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-1-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]==1){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-1-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]<0.3){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-1-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]==0){
m.cor[i,j]<-NA
}else if(m.cor[i,j]>0.7){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]==0){
m.cor[i,j]<-NA
}else if(m.cor[i,j]<0.7){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]==1){
m.cor[i,j]<-NA
}else if(m.cor[i,j]<0.7){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
args(summary)
summary
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]==1){
m.cor[i,j]<-NA
}else if(m.cor[i,j]<0.5){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
cor.mat<-function(data,thresh=0.5){
m.cor<-matrix(nrow=dim(data)[2],ncol=dim(data)[2],dimnames=list(names(data),names(data)))
for (i in 1:dim(data)[2]){
for (j in 1:dim(data)[2]){
m.cor[i,j]<-round(abs(with(data,cor(data[,i],data[,j]))),2)
m.cor[i,j]<-NA
if(m.cor[i,j]==1){
}else if(m.cor[i,j]<thresh){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
}
cor.mat(d,0.5)
cor.mat(mtcars,0.5)
m.cor<-matrix(nrow=dim(data)[2],ncol=dim(data)[2],dimnames=list(names(data),names(data)))
for (i in 1:dim(data)[2]){
for (j in 1:dim(data)[2]){
m.cor[i,j]<-round(abs(with(data,cor(data[,i],data[,j]))),2)
if(m.cor[i,j]==1){
m.cor[i,j]<-NA
}else if(m.cor[i,j]<thresh){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
m.cor<-matrix(nrow=dim(d)[2],ncol=dim(d)[2],dimnames=list(names(d),names(d)))
for (i in 1:dim(d)[2]){
for (j in 1:dim(d)[2]){
m.cor[i,j]<-round(abs(with(d,cor(d[,i],d[,j]))),2)
if(m.cor[i,j]==1){
m.cor[i,j]<-NA
}else if(m.cor[i,j]<thresh){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
d
m.cor<-matrix(nrow=dim(mtcars)[2],ncol=dim(mtcars)[2],dimnames=list(names(mtcars),names(mtcars)))
for (i in 1:dim(mtcars)[2]){
for (j in 1:dim(mtcars)[2]){
m.cor[i,j]<-round(abs(with(mtcars,cor(mtcars[,i],mtcars[,j]))),2)
if(m.cor[i,j]==1){
m.cor[i,j]<-NA
}else if(m.cor[i,j]<0.5){
m.cor[i,j]<-NA
}
}
}
m.cor
heatmap(m.cor,Rowv=NA,Colv=NA)
install.packages("IBrokers")
library("IBrokers", lib.loc="C:/Program Files/R/R-3.0.2/library")
library(shiny)
runExample("01_hello")
setwd("D:/03 Coursera/01 DATA SPECIALIZATION/03 Data products/TESTS/shiny01")
shiny::runApp('D:/03 Coursera/01 DATA SPECIALIZATION/03 Data products/TESTS/energyapp')
clim<-read.csv("helpers/climatedata.csv")
dir()
setwd("D:/03 Coursera/01 DATA SPECIALIZATION/03 Data products/TESTS/energyapp")
clim<-read.csv("helpers/climatedata.csv")
head(clim)
str(clim)
city<-unique(clim$city)
city
city[2]
city<-unique(as.character(clim$city))
city
city[2]
kk<-list()
kk
kk[1]= 3
kk[2]=3
kk
list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3)
kk<- list("Choice 1" = 1, "Choice 2" = 2,
+      "Choice 3" = 3)
kk<- list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3)
kk
names(kk)
cityindex<-list()
for (i in 1:length(city)){
cityindex[i] = i
}
names(cityindex)<-city
cityindex
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
city
city[1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(clim)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
y<-clim[clim$city == 1,]
y
clim
clim[1,]
city
city[1]
shiny::runApp()
y<-clim[city[input$cities],]
y<-clim[city[1],]
y
y<-clim[city[2],]
y
city[2]
y<-clim[clim$city == city[2],]
y
shiny::runApp()
shiny::runApp()
ymin<-clim[clim$city == city[input$cities],][1]
ymin<-clim[clim$city == city[1],][1]
ymin
ymin<-clim[clim$city == city[1],]
ymin
ymin<-clim[clim$city == city[1],][1,]
ymin
shiny::runApp()
shiny::runApp()
ylim[14]
ymin[14]
x<-c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
ymin
ymin<-clim[clim$city == city[input$cities],][1,3:14]
ymin<-clim[clim$city == city[1],][1,3:14]
ymin
plot(x,ymin)
hist(x,ymin)
barplot(x,ymin)
timeseries(x,ymin)
as.Date(x)
as.Date(x,format= %MMM)
as.Date(x,format= %b)
as.Date(x,format= %bbb)
install.packages("yearmon")
install.packages("zoo")
library(zoo)
x<-as.yearmon("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
x
x<-as.yearmon(c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"), "%b")
x
x<-format(as.yearmon(c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"), "%b"),"%b")
x
plot(x,ymin)
x<-as.numeric(format(as.yearmon(c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"), "%b"),"%b"))
x
x<-as.numeric(format(as.yearmon(c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"), "%b"),"%b"),"%b")
x
x<-1:12
plot(x,ymin)
plot(x,ymin, type="l")
y<-clim[clim$city == city[input$cities],]
plot(x,y, type="l")
y<-clim[clim$city == 1,]
plot(x,y, type="l")
y<-clim[clim$city == 1,][,3:14]
plot(x,y, type="l")
y
y<-clim[clim$city == 1,]
y
y<-clim[clim$city == city[1],][,3:14]
y
plot(x,y, type="l")
plot(x,ymin,type="line",col="blue",lwd=2)
plot(x,ymin,type="line",col="blue",lwd=2,main="Temperatures",ylab="Temperature [C]",xlab="Month")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(ggplot2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
clim
melt(clim)
library(reshape)
melt(clim,by=c("city","type"))
shiny::runApp()
shiny::runApp()
data
cl
cl<-melt(clim,by=c("city","type"))
cl
cl[cl$city == 1]
cl[cl$city == city[1]]
cl[cl$city == city[1],]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cl<-melt(clim,by=c("city","type"))
cl
cl$variable<-as.yearmon(cl$variable,"%b")
cl
str(cl)
shiny::runApp()
cl<-melt(clim,by=c("city","type"))
cl$variable<-as.Date(cl$variable,"%b")
cl
cl<-melt(clim,by=c("city","type"))
cl$variable<-as.Date(cl$variable,format="%b")
cl
cl<-melt(clim,by=c("city","type"))
cl$variable<-as.yearmon(cl$variable,format="%b")
cl
cl$variable<-format(as.yearmon(cl$variable,format="%b"),"%b")
cl<-melt(clim,by=c("city","type"))
cl$variable<-format(as.yearmon(cl$variable,format="%b"),"%b")
cl
as.Date(cl$variable)
as.Date(cl$variable,"%m")
as.Date(cl$variable,"%mm")
as.Date(cl$variable,"%mmm")
as.Date(cl$variable,"%b")
as.Date(cl$variable,"%Y")
as.Date(cl$variable,"%Y%m")
cl<-melt(clim,by=c("city","type"))
cl$variable<-(as.yearmon(cl$variable,format="%b"))
as.Date(cl$variable,"%Y%m")
cl
as.Date(cl$variable,"%Y %m")
?yearmon
as.numeric(cl$variable)
as.POSIXct(cl$variable)
as.POSIXct(cl$variable)$month
as.POSIXct(cl$variable)$hour
as.POSIXct(cl$variable)$h
as.Date(as.POSIXct(cl$variable))
as.Date(as.POSIXct(cl$variable))$m
as.Date(as.POSIXct(cl$variable))$M
as.Date(as.POSIXct(cl$variable))$month
as.POSIXct(cl$variable)
?as.POSIXc
?as.POSIXct
cl<-melt(clim,by=c("city","type"))
cl$variable<-as.POSIXct(as.yearmon(cl$variable,format="%b"))
cl
cl<-melt(clim,by=c("city","type"))
cl$variable<-as.Date(as.POSIXct(as.yearmon(cl$variable,format="%b")))
shiny::runApp()
cl
cl[cl$city == city[1,]
]
cl[cl$city == city[1,]]
cl[cl$city == city[1],]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data
cl
clim
clim[clim$city == 1,]
clim[clim$city == city[1],]
clim[clim$city == city[1],][1,]
clim[clim$city == city[1],][1,][3:14]
shiny::runApp()
as.Date(as.POSIXct(as.yearmon(names(clim)[3:14],format="%b")))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
20 - clim[clim$city == as.numeric(city[1]),][1,][3:14]
20 - clim[clim$city == (city[1]),][1,][3:14]
Tdif<-20 - clim[clim$city == (city[1]),][1,][3:14]
deg<-20 - clim[clim$city == (city[1]),][1,][3:14]
Tdif<- rep(0,length(deg))
for (i in 1:length(deg)){
if (deg[i]>0){
Tdif[i] <- deg[i]
}
}
Tdif
unlist(Tdif)
shiny::runApp()
shiny::runApp()
Tdif<-unlist(Tdif)
cons<-Tdif * input$facade * input$uval * input$hours * 30/1000
cons<-Tdif * 300 * 2 * 8 * 30/1000
cons
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
heating
ach
ach <- 300 * 3 * 1 * Tdif * 4.18*1.25/3600 * 8 *30
ach
cons
heating<-data.frame(month,ach,cons)
month <- as.Date(as.POSIXct(as.yearmon(names(clim)[3:14],format="%b")))
heating<-data.frame(month,ach,cons)
heating
melt(heating)
melt(heating,id="month")
shiny::runApp()
shiny::runApp()
shiny::runApp()
